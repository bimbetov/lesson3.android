1) Add dependencies for navigation-fragment-ktx and navigation-ui-ktx in the build.gradle (module) file.
2) In a file (often called navigation.xml) in the res > navigation folder.
3) You add the NavHostFragment to the main layout by adding a <fragment> whose name is 
androidx.navigation.fragment.NavHostFragment.
4) 
- You create a potential path through the app from one Fragment to another by connecting the fragments
in the navigation graph.
- To open the navigation graph, you double-click the navigation file (navigation.xml) in the Android Studio
Project pane, then click the Design tab.
5) In the project's navigation file, either by setting the ID attribute in the navigation graph or in the navigation
XML file in the res > navigation folder.
6)In the onclickListener for the Show headlines button, call navigate() on the navigation controller, passing
the action that connects the NewsFragment to the HeadlinesFragment.
7)
- The destination of the action_FragmentA_to_FragmentB action specifies that when the user is at FragmentA,
the next destination in the app is FragmentB.
- The popUpTo attribute of the action can modify where the app navigates to if the user taps the system Back button.
8) For action_FragmentA_to_FragmentB, set popUpTo to none and popUpToInclusive to no value.
(You can omit both attributes.) For action_FragmentB_to_FragmentC, set popUpTo to fragmentA and
popUpToInclusive to false.
9) 
- If popUpToInclusive is true: Android navigates out of the app because there is nothing left in the back stack
for this app.
- If popUpToInclusive is false: The app goes back to the news home screen.
10) In a menu_name.xml file in the res > menu folder, add an <item> tag for each menu item. Create separate XML
files for each separate menu.
11) 
- Call setHasOptionsMenu(true) in onCreate() for an Activity, or in onCreateView() for a Fragment.
- Implement onCreateOptionsMenu() in the Activity or Fragment to create the menu.
- Implement onOptionsItemSelected() in the Activity or Fragment to determine what happens when a user selects
a menu item in the options menu.
12) Use <DrawerLayout> as the root view in the relevant layout file, and add a <NavigationView> tag to that layout.
13) B:
NavigationUI.setupWithNavController(navigationView, navigationController)
14) 
- Link the navigation controller to the app bar using
NavigationUI.setupActionBarWithNavController(context,navigationController)
- Override onSupportNavigateUp() method to call navigateUp() on the navigation controller.





